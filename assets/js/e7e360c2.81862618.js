"use strict";(self.webpackChunkPCB_Design=self.webpackChunkPCB_Design||[]).push([[9086],{3193:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>o,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"projects/project-esp32/schematic","title":"**3. Schematic Design**","description":"The schematic design phase is the foundation of any PCB project. It involves creating a logical representation of the circuit, defining how components are connected, and ensuring that the design meets the project requirements. In this chapter, we will walk through the process of designing the schematic for the ESP32-based IoT device in KiCad 7.","source":"@site/docs/09_projects/04_project-esp32/03_schematic.md","sourceDirName":"09_projects/04_project-esp32","slug":"/projects/project-esp32/schematic","permalink":"/PCB-Design-with-KiCad/docs/projects/project-esp32/schematic","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/09_projects/04_project-esp32/03_schematic.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"projectsSidebar","previous":{"title":"**2. Setting Up the KiCad Project**","permalink":"/PCB-Design-with-KiCad/docs/projects/project-esp32/setting-up"},"next":{"title":"**4. PCB Layout**","permalink":"/PCB-Design-with-KiCad/docs/projects/project-esp32/layout"}}');var r=s(4848),t=s(8453);const o={},c="3. Schematic Design",l={},h=[{value:"<strong>3.1 Placing Key Components</strong>",id:"31-placing-key-components",level:2},{value:"<strong>3.2 Wiring the Schematic</strong>",id:"32-wiring-the-schematic",level:2},{value:"<strong>3.3 Adding Power and Ground Connections</strong>",id:"33-adding-power-and-ground-connections",level:2},{value:"<strong>3.4 Annotating and Assigning Footprints</strong>",id:"34-annotating-and-assigning-footprints",level:2},{value:"<strong>3.5 Finalizing the Schematic</strong>",id:"35-finalizing-the-schematic",level:2},{value:"<strong>3.6 Summary</strong>",id:"36-summary",level:2}];function d(n){const e={h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"3-schematic-design",children:(0,r.jsx)(e.strong,{children:"3. Schematic Design"})})}),"\n",(0,r.jsx)(e.p,{children:"The schematic design phase is the foundation of any PCB project. It involves creating a logical representation of the circuit, defining how components are connected, and ensuring that the design meets the project requirements. In this chapter, we will walk through the process of designing the schematic for the ESP32-based IoT device in KiCad 7."}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"31-placing-key-components",children:(0,r.jsx)(e.strong,{children:"3.1 Placing Key Components"})}),"\n",(0,r.jsx)(e.p,{children:"The first step in schematic design is to place the key components that form the core of the circuit. These components include the ESP32 module, sensors, power supply, and interfaces."}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"ESP32 WROOM Module"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Open the ",(0,r.jsx)(e.strong,{children:"Schematic Editor"})," and use the ",(0,r.jsx)(e.strong,{children:"Place Symbol"})," tool (shortcut: ",(0,r.jsx)(e.strong,{children:"A"}),")."]}),"\n",(0,r.jsxs)(e.li,{children:["Search for ",(0,r.jsx)(e.strong,{children:"ESP32"})," and select the ",(0,r.jsx)(e.strong,{children:"ESP32-WROOM-32D"})," module."]}),"\n",(0,r.jsx)(e.li,{children:"Place the ESP32 symbol in the center of the schematic page."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"USB-C Connector and ESD Protection"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Search for ",(0,r.jsx)(e.strong,{children:"USB-C"})," and place the connector near the ESP32."]}),"\n",(0,r.jsxs)(e.li,{children:["Add an ESD protection component (e.g., ",(0,r.jsx)(e.strong,{children:"USBLC6-2SC6"}),") to protect the USB interface from electrostatic discharge."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"CP2104 USB-to-Serial Converter"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Search for ",(0,r.jsx)(e.strong,{children:"CP2104"})," and place it near the USB connector."]}),"\n",(0,r.jsx)(e.li,{children:"This component enables programming and debugging of the ESP32 via USB."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"SI7021 Temperature and Humidity Sensor"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Search for ",(0,r.jsx)(e.strong,{children:"SI7021"})," and place it on the schematic."]}),"\n",(0,r.jsx)(e.li,{children:"This sensor communicates with the ESP32 via the I\xb2C bus."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Relay Circuit"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Search for ",(0,r.jsx)(e.strong,{children:"RT314A05"})," (relay) and place it on the schematic."]}),"\n",(0,r.jsxs)(e.li,{children:["Add a transistor (e.g., ",(0,r.jsx)(e.strong,{children:"BC817"}),") and a diode (e.g., ",(0,r.jsx)(e.strong,{children:"1N4148"}),") to control and protect the relay."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"RGB LED and Button Interface"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Place an ",(0,r.jsx)(e.strong,{children:"RGB LED"})," and a ",(0,r.jsx)(e.strong,{children:"push-button switch"})," on the schematic."]}),"\n",(0,r.jsx)(e.li,{children:"These components provide user interaction and visual feedback."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Level Converters (74HCT245)"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Search for ",(0,r.jsx)(e.strong,{children:"74HCT245"})," and place it on the schematic."]}),"\n",(0,r.jsx)(e.li,{children:"This component converts 3.3V logic levels to 5V for controlling external LED strips."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Screw Terminals and Fused Power Supply"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Place ",(0,r.jsx)(e.strong,{children:"screw terminals"})," for power input and output."]}),"\n",(0,r.jsxs)(e.li,{children:["Add a ",(0,r.jsx)(e.strong,{children:"fuse"})," (e.g., 1A polyfuse) for overcurrent protection."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Mounting Holes"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Add ",(0,r.jsx)(e.strong,{children:"mounting holes"})," to the schematic for mechanical stability."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"32-wiring-the-schematic",children:(0,r.jsx)(e.strong,{children:"3.2 Wiring the Schematic"})}),"\n",(0,r.jsx)(e.p,{children:"Once the components are placed, the next step is to connect them logically using wires and labels."}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"USB Interface and Programming Circuit"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Connect the ",(0,r.jsx)(e.strong,{children:"USB-C connector"})," to the ",(0,r.jsx)(e.strong,{children:"CP2104"})," USB-to-serial converter."]}),"\n",(0,r.jsxs)(e.li,{children:["Add ",(0,r.jsx)(e.strong,{children:"5.1k\u03a9 pull-down resistors"})," to the CC pins of the USB-C connector."]}),"\n",(0,r.jsxs)(e.li,{children:["Connect the ",(0,r.jsx)(e.strong,{children:"TX"}),", ",(0,r.jsx)(e.strong,{children:"RX"}),", ",(0,r.jsx)(e.strong,{children:"RTS"}),", and ",(0,r.jsx)(e.strong,{children:"DTR"})," pins of the CP2104 to the ESP32 for programming."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"I\xb2C Interface for Sensors"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Connect the ",(0,r.jsx)(e.strong,{children:"SI7021 sensor"})," to the ESP32 via the ",(0,r.jsx)(e.strong,{children:"SDA"})," and ",(0,r.jsx)(e.strong,{children:"SCL"})," lines."]}),"\n",(0,r.jsxs)(e.li,{children:["Add ",(0,r.jsx)(e.strong,{children:"4.7k\u03a9 pull-up resistors"})," to the SDA and SCL lines."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Relay Control Circuit"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Connect the ",(0,r.jsx)(e.strong,{children:"relay"})," to the ESP32 via a transistor."]}),"\n",(0,r.jsxs)(e.li,{children:["Add a ",(0,r.jsx)(e.strong,{children:"flyback diode"})," across the relay coil to protect against voltage spikes."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Power Supply and LDO (TLV1117LV-3.3V)"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Connect the ",(0,r.jsx)(e.strong,{children:"5V input"})," from the USB connector to the input of the ",(0,r.jsx)(e.strong,{children:"TLV1117LV-3.3V"})," LDO."]}),"\n",(0,r.jsxs)(e.li,{children:["Add ",(0,r.jsx)(e.strong,{children:"decoupling capacitors"})," (e.g., 22\xb5F and 100nF) to the input and output of the LDO."]}),"\n",(0,r.jsxs)(e.li,{children:["Connect the ",(0,r.jsx)(e.strong,{children:"3.3V output"})," of the LDO to the ESP32 and other 3.3V components."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"LED Strip Interface"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Connect the ",(0,r.jsx)(e.strong,{children:"74HCT245 level shifter"})," to the ESP32 GPIO pins."]}),"\n",(0,r.jsxs)(e.li,{children:["Add ",(0,r.jsx)(e.strong,{children:"series resistors"})," (e.g., 220\u03a9) to protect the LED strip outputs."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"RGB LED and Button Interface"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Connect the ",(0,r.jsx)(e.strong,{children:"RGB LED"})," to the ESP32 GPIO pins via ",(0,r.jsx)(e.strong,{children:"current-limiting resistors"})," (e.g., 1k\u03a9)."]}),"\n",(0,r.jsxs)(e.li,{children:["Connect the ",(0,r.jsx)(e.strong,{children:"push-button switch"})," to the ESP32 GPIO pin with a ",(0,r.jsx)(e.strong,{children:"pull-up resistor"})," (e.g., 10k\u03a9)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"33-adding-power-and-ground-connections",children:(0,r.jsx)(e.strong,{children:"3.3 Adding Power and Ground Connections"})}),"\n",(0,r.jsx)(e.p,{children:"Proper power and ground connections are critical for the functionality and reliability of the circuit."}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Power Nets"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Label the ",(0,r.jsx)(e.strong,{children:"5V"})," and ",(0,r.jsx)(e.strong,{children:"3.3V"})," nets using the ",(0,r.jsx)(e.strong,{children:"Place Label"})," tool (shortcut: ",(0,r.jsx)(e.strong,{children:"L"}),")."]}),"\n",(0,r.jsx)(e.li,{children:"Ensure all components requiring 5V or 3.3V are connected to the appropriate nets."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Ground Nets"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Place ",(0,r.jsx)(e.strong,{children:"ground symbols"})," (shortcut: ",(0,r.jsx)(e.strong,{children:"G"}),") throughout the schematic."]}),"\n",(0,r.jsx)(e.li,{children:"Ensure all components requiring a ground connection are properly grounded."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"34-annotating-and-assigning-footprints",children:(0,r.jsx)(e.strong,{children:"3.4 Annotating and Assigning Footprints"})}),"\n",(0,r.jsx)(e.p,{children:"Annotating components and assigning footprints ensures that the schematic is ready for PCB layout."}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Annotate Components"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Go to ",(0,r.jsx)(e.strong,{children:"Tools > Annotate Schematic"}),"."]}),"\n",(0,r.jsx)(e.li,{children:"Assign unique reference designators (e.g., R1, C1, U1) to all components."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Assign Footprints"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Go to ",(0,r.jsx)(e.strong,{children:"Tools > Assign Footprints"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:["Assign appropriate footprints to each component. For example:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"ESP32"}),": Use a standard ESP32 footprint."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"CP2104"}),": Use a QFN-24 footprint."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"SI7021"}),": Use a DFN-6 footprint."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Resistors and Capacitors"}),": Use 0402 or 0805 footprints for SMD components."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"35-finalizing-the-schematic",children:(0,r.jsx)(e.strong,{children:"3.5 Finalizing the Schematic"})}),"\n",(0,r.jsx)(e.p,{children:"Before moving to the PCB layout, perform a final review of the schematic to ensure accuracy and completeness."}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Check Connections"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Verify that all components are properly connected and labeled."}),"\n",(0,r.jsxs)(e.li,{children:["Use the ",(0,r.jsx)(e.strong,{children:"Electrical Rules Check (ERC)"})," tool to identify and fix any errors."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Add Documentation"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:'Add text boxes to label functional blocks (e.g., "Power Supply," "USB Interface," "I\xb2C Sensors").'}),"\n",(0,r.jsx)(e.li,{children:"Include notes or comments to explain specific design choices."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Save and Export"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Save the schematic file."}),"\n",(0,r.jsx)(e.li,{children:"Export a PDF version of the schematic for documentation and sharing."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"36-summary",children:(0,r.jsx)(e.strong,{children:"3.6 Summary"})}),"\n",(0,r.jsx)(e.p,{children:"In this chapter, we designed the schematic for the ESP32-based IoT device. We placed key components, wired the circuit, added power and ground connections, and assigned footprints. The schematic serves as the blueprint for the PCB layout, ensuring that all connections and components are accurately represented. In the next chapter, we will transition to the PCB layout phase, where we will bring the schematic to life by designing the physical board."}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.p,{children:"This chapter provides a detailed guide to schematic design in KiCad, covering everything from component placement to finalizing the schematic. By following these steps, you\u2019ll create a well-organized and error-free schematic that forms the foundation of your PCB design."})]})}function a(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>o,x:()=>c});var i=s(6540);const r={},t=i.createContext(r);function o(n){const e=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);